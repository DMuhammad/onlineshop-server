// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  DELIVERED
}

enum Role {
  USER
  ADMIN
}

enum VariantType {
  SIZE
  COLOR
  VOLUME
  FLAVOR
}

model User {
  id        String   @id @default(uuid(7))
  fullName  String   @db.VarChar(255)
  email     String   @unique
  password  String
  photoUrl  String?
  phone     String
  address   String   @db.VarChar(255)
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart[]
  Order     Order[]
  Review    Review[]
}

model Category {
  id        String    @id @default(uuid(7))
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Product {
  id             String           @id @default(uuid(7))
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     String
  name           String
  description    String           @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductVariant ProductVariant[]
}

model ProductVariant {
  id           String      @id @default(uuid(7))
  product      Product     @relation(fields: [productId], references: [id])
  productId    String
  variantType  VariantType
  variantValue String
  price        Decimal
  stock        Int
  imageURL     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Cart         Cart[]
  OrderItem    OrderItem[]
}

model Cart {
  id               String         @id @default(uuid(7))
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String
  quantity         Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Discount {
  id          String   @id @default(uuid(7))
  code        String
  type        String
  value       Decimal
  expiredDate DateTime
  createdAt   DateTime @default(now())
  Order       Order[]
}

model Order {
  id         String      @id @default(uuid(7))
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  discount   Discount?   @relation(fields: [discountId], references: [id])
  discountId String?
  totalPrice Decimal
  note       String      @db.VarChar(255)
  status     OrderStatus
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  OrderItem  OrderItem[]
  Payment    Payment[]
  Shipment   Shipment[]
  Review     Review[]
}

model OrderItem {
  id               String         @id @default(uuid(7))
  order            Order          @relation(fields: [orderId], references: [id])
  orderId          String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String
  quantity         Int
  subtotal         Decimal
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Payment {
  id            String        @id @default(uuid(7))
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String
  paymentMethod String
  price         Decimal
  status        PaymentStatus
  paidAt        DateTime      @default(now())
}

model Shipment {
  id               String         @id @default(uuid(7))
  order            Order          @relation(fields: [orderId], references: [id])
  orderId          String
  trackingNumber   String
  courier          String
  estimateDelivery DateTime       @db.Date
  status           ShipmentStatus
  shippedAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Review {
  id        String   @id @default(uuid(7))
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  rating    Int
  comment   String   @db.VarChar(255)
  createdAt DateTime @default(now())
}
